--- a/analizador/main/routes.py
+++ b/analizador/main/routes.py
@@ def get_available_dates():
     return sorted(dates)
@@
 @main.route('/', methods=['GET', 'POST'])
 @login_required
 def index():
-    if request.method == 'GET':
-        # get_all_incident_dates() podría hacer un query tipo "SELECT DISTINCT time..."
-        # y devolver ['2025-06-01', '2025-06-02', ...]
-        raw_dates = get_all_incident_dates()  
+    if request.method == 'GET':
+        # sólo traemos las fechas disponibles para poblar los <select>
+        raw_dates = get_available_dates()
       # ordenar como date real
       dates_dt = sorted(datetime.fromisoformat(d).date() for d in raw_dates)
       available_start_dates = [d.strftime("%d-%m-%Y") for d in dates_dt]
       available_end_dates   = available_start_dates
@@
   if request.method == 'POST':
       # 1) Recogemos datos del formulario
       form_data = request.form
       start_str = form_data.get('start_date')     # 'DD-MM-YYYY' o ''
       end_str   = form_data.get('end_date')
       distrito  = form_data.get('distrito')
       causa     = form_data.get('causa')

-        # convertir a date y a ISO (YYYY-MM-DD) para la query
-        sd = datetime.strptime(sd_str, "%d-%m-%Y").date() if sd_str else None
-        ed = datetime.strptime(ed_str, "%d-%m-%Y").date() if ed_str else None
+        # convertir a date y a ISO (YYYY-MM-DD) para la query
+        sd = datetime.strptime(start_str, "%d-%m-%Y").date() if start_str else None
+        ed = datetime.strptime(end_str,   "%d-%m-%Y").date() if end_str   else None

       # si sólo puso start, asumimos hasta el día siguiente
-        if sd and not ed:
+        if sd and not ed:
            ed = sd + timedelta(days=1)

-        # (asumimos que get_filtered acepta strings 'DD-MM-YYYY')
-        incidents = get_filtered_incidents(start_str, end_str, distrito, causa)
+        # llamamos con objetos date (soportan isoformat())
+        incidents = get_filtered_incidents(sd, ed, distrito, causa)

       # 3) Orden real: parseamos fecha+hora y ordenamos
       incidents.sort(key=lambda inc: datetime.strptime(
           f"{inc['fecha_inicio_fmt']} {inc['hora_inicio_fmt']}",
           "%d-%m-%Y %H:%M:%S"
       ))
